语音接口
注:通过Java或Python实现，函数为同步函数。
————————————————————————————————————————————————————————————————————————————————
函数名:
  init_object
用途:
  初始化能够检测到的物体及其关键词
参数:
  code
    物品代码，英文字母
  keywords
    关键词数组，命中任何一个即匹配。
举例:
1.初始化"手机"
  init_object(code='mobile',
              keywords=['手机', 'iPhone', 'moto'])
2.初始化"杯子"
  init_object(code='cup',
              keywords=['杯子', '水杯'])
————————————————————————————————————————————————————————————————————————————————
函数名:
  talk
输入参数:
  read_text
    朗读的文本，空字符串表示不需要朗读。
  listen_keywords
    侦听关键词数组，数组为二维数组。
    一维的逻辑关系由listen_mode来决定，二维为或关系。
  listen_mode
    侦听模式，取值为'and'或者'or'。
    其中'and'表示同时满足关键词，'or'表示满足任意关键词即可。
  listen_period
    侦听周期，单位为秒，表示对过去周期时间内的语音进行侦听分析。
  listen_timeout
    侦听超时，单位为秒，超过该时间则返回空字符串，0表示无超时。
返回值：
  keywords
    侦听到的关键词数组。
  object_codes
    侦听到的可辨认物体的code数组。
举例：
1.激活HopeEyes的调用
  talk(read_text='',
       listen_keywords=[['你好'], ['联想']],
       listen_mode='and',
       listen_period=5,
       listen_timeout=0);
  表示一直检查过去5秒的语音输入是否包含"你好"及"联想"两个字，包含表示要开机干活了。
2.工作模式选择
  talk(read_text='我能为您做什么?',
       listen_keywords=[['找', '哪里'], ['辨认', '什么']]),
       listen_mode='or',
       listen_period=10,
       listen_timeout=60);
  "找"和"哪里"对应的是寻找物品的工作模式；
  "辨认"和"什么"对应的是告知手中物品的工作模式。
  如果返回keywords=['找'], object_codes=['cup']则表示用户需要找水杯。
3.告知物品在哪并等待下一个工作
  talk(read_text='水杯在您的左侧',
     listen_keywords=[['找', '哪里'], ['辨认', '什么']]),
     listen_mode='or',
     listen_period=10,
     listen_timeout=60);
